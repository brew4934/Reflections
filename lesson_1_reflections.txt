How did viewing a diff between two versions of a file help you see the bug that was introduced?

Using diff extracted only lines that were different, and placed the differences next to each other.
By visually scanning only sections that are different, it is much easier to identify errors in
long code files.


How could having easy access to the entire history of a file make you a more efficient programmer
in the long term?

Coding mistakes are inevitable, so one obvious advantage is the ability to instantaneously view
every recent change to determine which addition or modification could be the root cause of a bug.
Additionally, viewing who modified the file points you toward the person you need to ask for
clarification on changes that were made.
Also, the ability to link changes and code at certain points in time with particular requirements
helps ensure that development is on the right track.


What do you think are the pros and cons of manually choosing when to create a commit, like you do
in Git, vs having versions automatically saved, like Google Docs does?
Manually saving allows meaninful saves that encompass a logical change, but relies on the user to
remember to save.  It also does not provide protection against unexpected corruption during the
development of a feature.

Auto saving means the code is regularly saved and the user does not have to remember to do it.
This means there is protection against unexpected events, like power failures, but runs the risk
of saving too often, or in strange places (like the middle of typing a line)


Why do you think some version control systems, like Git, allow saving multiple files in one commit,
while others, like Google Docs, treat each file separately?
They serve different purposes.  Typically, Google Docs are self-contained entities that have no
reliance on other documents.  Git, however, was designed to track changes for project code.  Code
is inherently broken into separate files with dependencies, so multiple file traking makes sense.


How can you use the commands git log and git diff to view the history of files?
You can use git log to view id, date, user, files impacted, and description of each commit.  You
can use git diff to compare two commits and view the differences in the modified file in a unified
view.


How might using version control make you more confident to make changes that could break something?
Knowing that you will be able to return to a known good state if something goes terribly wrong
makes you more comfortable making more risky changes.


Now that you have your workspace set up, what do you want to try using Git for?
I want to try using Git for a sample RTOS project using the new dev board.
